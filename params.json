{"name":"senf","tagline":"sensitive number finder","body":"### senf: the mustardy sensitive number finder\r\n\r\nsenf is a portable tool for finding sensitive numbers. Use this tool to identify files on your system that may have Social Security Numbers (SSNs) or Credit Card Numbers (CCNs). The latest version can always be found at the senf site.\r\n\r\n##### Warning! [About senf]\r\n\r\n*Warning*: Do not have a false sense of security after running this program\r\n\r\nIt is important to understand what senf is, and what senf is not\r\n\r\n##### What senf is\r\n\r\n* A program written in Java by humans\r\n* A program which can quickly and conveniently point the operator of a computer to files which contain strings of text which resemble SSNs or CCNs\r\n* A program which tries to find files with large quantities of SSNs/CCNs; you can tell it to find a single occurence of a pattern, but that will yield many false positives.\r\n\r\n##### What senf is not\r\n\r\n* An infallible oracle which will detect all SSNs/CCNs and only SSNs/CCNs.\r\n* A prophet which will enlighten a computer operator as to the exact location of an SSN/CCN within a file (although the GUI version is somewhat sibylline).\r\n* Designed to detect sensitive data in encoded/encrypted binary files. In fact, it skips many file extensions by default.\r\n\r\n\r\n##### What all this means\r\n\r\n* There will be false positives\r\n* There will be false negatives\r\n\r\n\r\n##### Which reduces to (even though it's longer)!\r\nThis tool is not to be regarded as the end-all in your effort to ensure your computer is free of SSN/CCN records. It simply will report to you files that contain numbers that could pose a security threat. Remember, it looks for strings of numbers -- and the typical computer has lots of these.\r\n\r\n---\r\n\r\n### Requirements\r\n\r\n#### Java 1.6 JRE\r\nNo matter what system you're running on, you need the  Java 1.6 runtime (or greater); you do not need the whole Java 1.6 SDK, which includes the runtime.\r\n\r\n#### System path\r\nWe assume that the Java interpreter is in your environment path (meaning, no matter where we try to run \"java\" from, it will run). The JRE installer should modify your system path to include the Java interpreter.\r\n\r\nIf you get a strange error message saying something along the lines of \"If you see this, senf did not run!\" then chances are your path is not set up correctly. Unfortunately, the solution to this is beyond the scope of this text.\r\n\r\n---\r\n\r\n### Installation\r\nOnce the JRE is installed, all you need to do is copy senf.jar and the seeds folder to some folder on the computer that is going to run the scan. You might also want to copy the configuration files to the same folder.\r\n\r\n---\r\n\r\n### Running\r\n#### Brief Note\r\n\r\nOn some Operating Systems (typically Windows and Mac OS X), simply double-clicking on the senf.jar file will launch the program automatically. If this works, you can skip the rest of this section.\r\n\r\n#### Windows\r\n\r\nOpen a command prompt\r\nNavigate to the folder in which senf is installed.\r\nRun java -jar senf.jar (with optional arguments)\r\n\r\n#### Linux and Mac OS X\r\n\r\nOpen a command shell\r\nNavigate to the folder in which senf is installed.\r\nRun java -jar senf.jar (with optional arguments)\r\n\r\n---\r\n\r\n### Using senf\r\n#### Usage: senf [OPTIONS]\r\n\r\n| Option         | Default        | Effect |\r\n| -------------- | -------------- | ------ |\r\n| -q             | off            | quiet mode (display no output)\r\n| -v\t           | off            | verbose mode (display everything)\r\n| -e\t           | off            | print error messages to the screen\r\n| -p <scan path> | working dir    | Set the path to start scanning from\r\n| -l <yyyyMMdd>  | off            | Set modified-date check; files last modified before this date are skipped\r\n| -f <filesize>  | infinite       | Set the max file size to scan; end size (no spaces) with 'g' for gigs, 'm' for megs, 'k' for kilobytes, and nothing for bytes\r\n| -m <number>    | 15             | Set minimum number of times to match a CCN/SSN pattern before reporting a file\r\n| -o <log file>  | senf\\_DATE.txt | Set the name of the file (including path, if you like) where log information will be saved\r\n| -al            | on             | Append the current log to the end of the file if it already exists\r\n| -ac            | off            | Append configuration information to the end of the output log\r\n| -nl            | off            | Do not use a log file\r\n| -g             | off            | Hide the GUI\r\n| -as            | off            | Auto-start scanning (ignored when -g is specified)\r\n| -h             | n/a            | Display this help and exit\r\n\r\nBy default, senf only prints to the screen files which are matched -- not all output is shown.\r\n\r\n#### Examples\r\n\r\n* To search all files in your home directory in Linux/Mac OS X\r\n\t* java -jar senf.jar -p ~/\r\n* To search all files in your home directory in Windows XP\r\n\t* java -jar senf.jar -p \"C:\\Documents and Settings\\<yourname>\"\r\n* To scan only files <= 100MB, ensure that each one has at least 12 matches before marking it as possible, display error messages, and start in a folder called C:\\mustard\\gruga\r\n\t* java -jar senf.jar -f 100m -m 12 -e -p \"C:\\mustard\\gruga\"\r\n\r\nAlso, note that this program may take a while to complete; again, by default, the only things it prints to the screen are possible matches (ie no errors), so it may look like it's frozen, not printing anything for a while, but it's (probably) not.\r\n\r\nAs of the Sasuke.188 release, senf provides a GUI for ease of use. The GUI offers a results viewer to help the user quickly identify what was flagged by senf as being sensitive. Results appear in the central pane of the senf window as they are found; if an entry is clicked on, the senf Analyzer will pop up, showing the applicable matches in the file.\r\n\r\n---\r\n\r\n### Configuration files\r\n\r\n#### Configuration\r\n\r\nsenf uses the file senf.conf to load default settings.\r\n\r\n#### Extensions\r\n\r\nAs of the Haku version, senf uses an ACL in place of the old whitelist/blacklist system. The ACL is contained in the file senf.acl, and can be modified either by editing the file, or through the senf GUI.\r\n\r\nACL entries have three columns. The first column denotes whether to allow or deny matches. The second dictates what type of match to look for. The third contains the expression to search for. Possible entries for each row are listed below.\r\n\r\n| ROW1  | ROW2       | ROW3 |\r\n| ----- | ---------- | ---- |\r\n| ALLOW | BEGINSWITH | <user_defined_expression>\r\n| DENY\t| CONTAINS   |\r\n|       | ENDSWITH   |\r\n|       | EXACTLY    |\r\n|       | REGEX\t     |\r\n\r\nAn example \"senf.acl\" file is included with common entries. In the case of two conflicting entries, the entry listed first will over rule the later entry.\r\n\r\n---\r\n\r\n### Libraries\r\nsenf is now able to use external JAR libraries to scan more file types than before. The most notable example of this is PDF files. senf uses  PDFBox to parse PDF files properly. It should be noted, that the PDFBox library depends on the  FontBox library.\r\n\r\nThese libraries should be placed in the \"libs\" folder in order for senf to function properly. They may be named anything, and will still function.\r\n\r\n---\r\n\r\n### How senf Works\r\nThe way senf scans has changed drasticly with the release of Haku. There are four important parts to senf Haku. Parsers, Seeds, Streams, and Stream Sources.\r\n\r\n#### Streams\r\n\r\nA Stream is something that senf can scan, and implements the class senfStream. An example of a \"Stream\" is a text file.\r\n\r\n#### Stream Sources\r\n\r\nA Stream Source is something that contains streams, and implemtnts the class senfStreamSource. An example of a Stream Source is a directory, or a zip file.\r\n\r\n#### Seeds\r\n\r\nA Seed is something that senf will look for in a Stream. Seeds implement the class Seed. As of senf Sasuke.188, Seeds are modular. This means that seeds may be added/removed from the \"seeds\" directory to modify what senf will or will not search for within a Stream. At the moment, senf includes a Seed for both Social Security Numbers and Credit Card numbers.\r\n\r\n#### Parsers\r\n\r\nParses are the objects that tell the senf engine what each \"object\" that is to be scanned should be scanned as. That is, the Parser tells senf what type of Stream or StreamSource each senfObject should be cast as. Parsers implement the class senfParser, and are modular.\r\n\r\n---\r\n\r\n### Algorithms\r\n\r\nsenf looks for certain patterns to reduce false positives. Those patterns are described here. These patterns cannot be used to find every conceivable incarnation of the numbers senf searches for. However, if you have suggestions for improving the algorithms (and, better, known false negatives to back up your suggestions) please let us know.\r\n\r\n#### Credit card numbers\r\n\r\n##### Formats\r\n\r\nThere are a number of valid credit card formats. senf supports only the 16 digit formats. This includes Mastercard, some (but evidently not all) VISA, and Discover. It does NOT include, for example, American Express.\r\n\r\n##### Separators\r\n\r\nCredit cards numbers may be one long string of numbers (nnnnnnnnnnnnnnnn), or may be separated into groups of four digits (nnnn-nnnn-nnnn-nnnn). There are, of course, as many ways to delimit groups of digits as can be imagined; senf only counts matches that use either no separator, or only one of:\r\n\r\n* dash (\"-\")\r\n* space (\" \")\r\n* dot (\".\")\r\n* pipe (\"|\")\r\n\r\n##### Luhn check\r\n\r\nCredit cards must pass a Luhn mod 10 check to be considered valid.\r\n\r\n#### Social Security Numbers\r\n\r\n##### Formats and separators\r\n\r\nSocials are detected in both single string (nnnnnnnnn) and grouped (nnn-nn-nnnn) formats; permitted separators are the same as credit card numbers.\r\n\r\n##### Validity checking\r\n\r\nSocials are verified against their area (the first three digits), according to the Social Security Administration's current list of valid high groups. In addition, group and serial numbers may not be all zeroes.\r\n\r\n---\r\n\r\n### Okay, that's all\r\n\r\nThank you for using senf! Feedback and questions are welcome; email security@utexas.edu\r\n\r\nThis version of the senf README was updated for senf.haku.335.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}